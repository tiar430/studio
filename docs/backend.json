{
  "entities": {
    "Program": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Program",
      "type": "object",
      "description": "Represents a program with its details, progress, and reward calculation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Program entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the program."
        },
        "type": {
          "type": "string",
          "description": "Type of the program."
        },
        "brand": {
          "type": "string",
          "description": "Brand associated with the program."
        },
        "target": {
          "type": "number",
          "description": "Target value for the program."
        },
        "pencapaian": {
          "type": "number",
          "description": "Achievement (pencapaian) value for the program."
        },
        "rewardValue": {
          "type": "number",
          "description": "Reward value associated with the program."
        },
        "startDate": {
          "type": "string",
          "description": "Start date of the program.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "End date of the program.",
          "format": "date-time"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Program)"
        }
      },
      "required": [
        "id",
        "name",
        "type",
        "brand",
        "target",
        "pencapaian",
        "rewardValue",
        "startDate",
        "endDate",
        "userId"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "email"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user data.  The 'userId' parameter is the Firebase Authentication UID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, corresponding to the Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/programs/{programId}",
        "definition": {
          "entityName": "Program",
          "schema": {
            "$ref": "#/backend/entities/Program"
          },
          "description": "Stores program data for a specific user.  'userId' is the Firebase Authentication UID, and 'programId' is a unique identifier for the program.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, corresponding to the Firebase Auth UID."
            },
            {
              "name": "programId",
              "description": "The unique identifier for the program."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to manage programs associated with users. Programs are stored as subcollections under each user's document to ensure clear ownership and security. This structure facilitates easy retrieval of programs for a specific user and enables simple, robust security rules. It uses path-based ownership for programs, making security rules straightforward and efficient. This approach avoids complex queries or document reads within security rules, enhancing performance and security.\n\n**Authorization Independence (CRITICAL):** The program documents are stored as subcollections of user documents, using `/users/{userId}/programs/{programId}`. This structure inherently ties program ownership to the user ID, ensuring that only the specific user can access or modify the programs under their ID. Therefore, authorization checks are based solely on the path and `request.auth.uid`, without needing to `get()` other documents.\n\n**QAPs (Rules are not Filters):** To support secure `list` operations, the programs are structured as subcollections of users. Listing programs is always scoped to a specific user (e.g., `/users/{userId}/programs`). Since the programs are namespaced under each user, listing programs does not require filtering across all programs in the database. The security rules can enforce that only the authenticated user can list programs under their own user ID."
  }
}